// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/fact.proto

package factorialService

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FactRequest struct {
	Num                  int64    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FactRequest) Reset()         { *m = FactRequest{} }
func (m *FactRequest) String() string { return proto.CompactTextString(m) }
func (*FactRequest) ProtoMessage()    {}
func (*FactRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_86b771b71bc65a04, []int{0}
}

func (m *FactRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FactRequest.Unmarshal(m, b)
}
func (m *FactRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FactRequest.Marshal(b, m, deterministic)
}
func (m *FactRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FactRequest.Merge(m, src)
}
func (m *FactRequest) XXX_Size() int {
	return xxx_messageInfo_FactRequest.Size(m)
}
func (m *FactRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FactRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FactRequest proto.InternalMessageInfo

func (m *FactRequest) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type FactResponse struct {
	Result               int64    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FactResponse) Reset()         { *m = FactResponse{} }
func (m *FactResponse) String() string { return proto.CompactTextString(m) }
func (*FactResponse) ProtoMessage()    {}
func (*FactResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_86b771b71bc65a04, []int{1}
}

func (m *FactResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FactResponse.Unmarshal(m, b)
}
func (m *FactResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FactResponse.Marshal(b, m, deterministic)
}
func (m *FactResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FactResponse.Merge(m, src)
}
func (m *FactResponse) XXX_Size() int {
	return xxx_messageInfo_FactResponse.Size(m)
}
func (m *FactResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FactResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FactResponse proto.InternalMessageInfo

func (m *FactResponse) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*FactRequest)(nil), "factorialService.FactRequest")
	proto.RegisterType((*FactResponse)(nil), "factorialService.FactResponse")
}

func init() { proto.RegisterFile("proto/fact.proto", fileDescriptor_86b771b71bc65a04) }

var fileDescriptor_86b771b71bc65a04 = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x4f, 0x4b, 0x4c, 0x2e, 0xd1, 0x03, 0x33, 0x85, 0x04, 0x40, 0xec, 0xfc, 0xa2, 0xcc,
	0xc4, 0x9c, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x25, 0x79, 0x2e, 0x6e, 0xb7, 0xc4, 0xe4,
	0x92, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x01, 0x2e, 0xe6, 0xbc, 0xd2, 0x5c, 0x09,
	0x46, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x10, 0x53, 0x49, 0x8d, 0x8b, 0x07, 0xa2, 0xa0, 0xb8, 0x20,
	0x3f, 0xaf, 0x38, 0x55, 0x48, 0x8c, 0x8b, 0xad, 0x28, 0xb5, 0xb8, 0x34, 0xa7, 0x04, 0xaa, 0x08,
	0xca, 0x33, 0x8a, 0xe3, 0x12, 0x70, 0x43, 0x33, 0x5c, 0xc8, 0x8b, 0x8b, 0x13, 0x2e, 0x26, 0x24,
	0xab, 0x87, 0x6e, 0xb9, 0x1e, 0x92, 0xcd, 0x52, 0x72, 0xb8, 0xa4, 0x21, 0xf6, 0x26, 0xb1, 0x81,
	0x7d, 0x60, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xae, 0xde, 0x8f, 0xe5, 0xd5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FactorialServiceClient is the client API for FactorialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FactorialServiceClient interface {
	Factorial(ctx context.Context, in *FactRequest, opts ...grpc.CallOption) (*FactResponse, error)
}

type factorialServiceClient struct {
	cc *grpc.ClientConn
}

func NewFactorialServiceClient(cc *grpc.ClientConn) FactorialServiceClient {
	return &factorialServiceClient{cc}
}

func (c *factorialServiceClient) Factorial(ctx context.Context, in *FactRequest, opts ...grpc.CallOption) (*FactResponse, error) {
	out := new(FactResponse)
	err := c.cc.Invoke(ctx, "/factorialService.FactorialService/Factorial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FactorialServiceServer is the server API for FactorialService service.
type FactorialServiceServer interface {
	Factorial(context.Context, *FactRequest) (*FactResponse, error)
}

// UnimplementedFactorialServiceServer can be embedded to have forward compatible implementations.
type UnimplementedFactorialServiceServer struct {
}

func (*UnimplementedFactorialServiceServer) Factorial(ctx context.Context, req *FactRequest) (*FactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Factorial not implemented")
}

func RegisterFactorialServiceServer(s *grpc.Server, srv FactorialServiceServer) {
	s.RegisterService(&_FactorialService_serviceDesc, srv)
}

func _FactorialService_Factorial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FactorialServiceServer).Factorial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/factorialService.FactorialService/Factorial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FactorialServiceServer).Factorial(ctx, req.(*FactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FactorialService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "factorialService.FactorialService",
	HandlerType: (*FactorialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Factorial",
			Handler:    _FactorialService_Factorial_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/fact.proto",
}
